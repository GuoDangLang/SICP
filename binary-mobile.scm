(define (make-mobile left right)
  (list left right))
(define (make-branch length structure)
  (list length structure))
(define (left-branch mo)
  (car mo))
(define (right-branch mo)
  (car (cdr mo)))
(define (branch-length br)
  (car br))
(define (branch-structure br)
  (car (cdr br)))
(define one (make-branch 3 6))
(define two (make-branch 3 2))
(define three (make-mobile one two))
(define four (make-branch 2 8))
(define five (make-branch 2 three))
(define test (make-mobile four five))
(define (mobile? unknown)
  (pair? unknown))
(define (total-weight_wrong mo)
  (let ((lb (left-branch mo))
	(rb (right-branch mo)))
    (define (get-weight branch)
      (if (= (branch-length branch) 0) (branch-structure branch)
	(+ (get-weight (left-branch branch))
	   (get-weight (right-branch branch)))))
    (+ (get-weight lb) (get-weight rb))))
(define (get-weight branch)
	  (let ((s (branch-structure branch)))
	    (if (mobile? s) (total-weight s)
	      s)))
(define (total-weight mo)
	(+ (get-weight (left-branch mo))
	   (get-weight (right-branch mo))))
(define (balanced-node? m)
    (let ((l (left-branch m))
	  (r (right-branch m)))
      (= (* (branch-length l)  (get-weight l)) (* (branch-length r) (get-weight r)))))
(define (balanced? mo)
  (define (balan-branch br)
    (if (mobile? (branch-structure br)) (balanced? (branch-structure br))
      1))
  (if (balanced-node? mo) (and (balan-branch (left-branch mo)) 
			       (balan-branch (right-branch mo)))
    0))
