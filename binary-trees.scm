(load "ordered-sets")
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))

(define (make-tree entry left right)
  (list entry left right))

(define (tree->list tree)
  (if (null? tree) '()
    (append (tree->list (left-branch tree))
	    (cons (entry tree)
	    (tree->list (right-branch tree))))))

(define (list->tree elements)
  (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
    (cons '() elts)
    (let ((left-size (quotient (- n 1) 2)))
      (let ((left-result (partial-tree elts left-size)))
	(let ((left-tree (car left-result))
	      (non-left-elts (cdr left-result))
	      (right-size (- n (+ left-size 1))))
	  (let ((this-entry (car non-left-elts))
		(right-result (partial-tree (cdr non-left-elts) right-size)))
	    (let ((right-tree (car right-result))
		  (remaining-elts (cdr right-result)))
	      (cons (make-tree this-entry left-tree right-tree) remaining-elts))))))))
(define (union-set tr1 tr2)
  (list->tree (union-sets (tree->list tr1) (tree->list tr2))))
(define (union-set-no-rel tr1 tr2)
  (cond ((null? tr1 ) tr2)
	((null? tr2 ) tr1)
	(else 
	  (let ((a (entry tr1))
		(b (entry tr2)))
	    (cond ((= a b) (make-tree b
				      (union-set-no-rel (left-branch tr1)
							(left-branch tr2))
				      (union-set-no-rel (right-branch tr1)
							(right-branch tr2))))
		  ((< a b) (make-tree b (union-set-no-rel tr1 (left-branch tr2))
				      (right-branch tr2)))
		  ((> a b) (make-tree b (left-branch tr2) (union-set-no-rel tr1
									    (right-branch tr2)))))))))
(define (intersection-set tr1 tr2)
  (list->tree (intersection-sets (tree->list tr1) (tree->list tr2))))
