(define (cube x) (* x x x))
(define (square x) (* x x))
(define (average x y) (/ (+ x y) 2))
(define (power n)
  (define (power-iter times temp)
    (if (= times n)
      temp
      (power-iter (+ 1 times) (lambda (x)
				(* (temp x) x)))))
      (power-iter 1 (lambda (x) x)))
(define (accumulate op initial sequence)
  (if (null? sequence)
    initial
    (op (car sequence)
	(accumulate op initial (cdr sequence)))))
(define nil (list))
(define (enumerate-interval low high)
  (if (> low high)
    nil
    (cons low (enumerate-interval (+ 1 low) high))))
(define (enumerate-tree tree)
  (cond ((null? tree) nil)
	((not (pair? tree)) (list tree))
	(else (append (enumerate-tree (car tree)) (enumerate-tree (cdr tree))))))
(define (filterr predicate sequence)
  (cond ((null? sequence) nil)
	((predicate (car sequence))
	 (cons (car sequence)
	       (filterr predicate (cdr sequence))))
	(else (filterr predicate (cdr sequence)))))
(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))
