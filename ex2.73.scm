(define (install-sum-deriv)
  (define (addend x)
    (cadr x))
  (define (augend x)
    (caddr x))
  (define (=number? x y)
    (and (number? x) (= x y)))
  (define (make-sum x y)
    (cond ((=number? x 0) y)
	  ((=number? y 0) x)
	  ((and (number? x) (number? y)) (+ x y))
	  (else (list '+ x y))))
  (define (deriv-sum exp var)
    (make-sum (deriv (addend exp) var)
	      (deriv (augend exp) var)))
  (define (tag x) (attach-tag '+ x))
  (put 'make-sum '+ (lambda (x y) (tag (make-sum x y))))
  (put 'deriv '+ deriv-sum))
(define (install-product-deriv)
  (define (multiplicand p) (caddr p))
  (define (multiplier p) (cadr p))
  (define (make-product x y)
    (cond ((or (=number? x 0) (=number? y 0)) 0)
	  ((=number? x 1) y)
	  ((=number? y 1) x)
	  ((and (number? x) (number? y)) (* x y))
	  (else (list '* x y))))
  (define (deriv-product exp var)
    (make-sum 
      (make-product (multiplier exp)
		    (deriv (multiplicand exp) var))
      (make-product (deriv (multiplier exp) var)
		    (multiplicand exp))))
  (define (tag x) (attach-tag '* x))
  (put 'make-product '* (lambda (x y) (tag (make-product x y))))
  (put 'deriv '* deriv-product)
  'done)


