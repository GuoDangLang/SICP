(define (install-division1-system)
  (define (get-record-name record)
    (car record))
  (define (tag x) (attach-tag 'division1 x))
  (define (get-record lists name)
    (if (null? lists) (error "no such record")
      (define (then lists name)
	(cond ((null? lists) '())
	      ((eq? (get-record-name (car lists)) name) 
	       (cons (cadr lists) (then (cdr lists) name)))
	      (else (then (cdr lists) name))))
      (then (cdr lists) name)))
  (put 'get-record 'division1 get-record)
  (put 'get-record-name 'division1 get-record-name)
(define (get-salary lists name)
  (if (null? lists) (error "no such person")
    (define (then lists name)
      (cond ((null? lists) '())
	    ((eq? (get-record-name (cadr lists)) name) 
	     (cons (cadr (cadr lists)) (then (cdr lists) name)))
	    (else (then (cdr lists) name))))
    (then lists name)))
(put 'get-salary 'division1 get-salary)
'done)
(define (generic-op op . onwhat)
  (let ((typetags (map (type-tag onwhat))))
    (let ((proc (get op type-tags)))
      (if proc
	(apply proc (map contents onwhat))
	(error 
	  "No method for these types -- APPLY-GENERIC"
	  (list op type-tags))))))
(define (find-employee-record name files)
  (if (null? files) (error "no result")
	(define (then name files)
	  (if (null? files) '()
	    (append ((get 'get-record (caar files)) (car files) name) 
		    (then name (cdr files)))))
	(then name files)))

