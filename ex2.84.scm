(define tower '(integer rational real complex))
(define (apply-generic op . args)
  (define (higher? a b tower)
    (cond ((null? tower) (error "NO THESE TYPES"))
	  ((eq? (car tower) a) false)
	  ((eq? (car tower) b) true)
	  (else (highter? a b (cdr tower)))))
  (define (tosamerank a1 a2)
    (let ((temp (raise a1))
	  (t1 (type-tag a1))
	  (t2 (type-tag a2)))
      (if (higher? t2 (type-tag temp))
	(tosamerank temp a2))))
  (define (apply-adjust args)
    (if (< (length 2)) (error "NO METHODS")
      (if (> (length 2)) (error "NO METHODES")
	(let ((a1 (car args))
	      (a2 (cdr args))
	      (t1 (type-tag a1))
	      (t2 (type-tag a2)))
	  (if (higher t1 t2)
	    (tosamerank a1 a2)
	    (tosamerank a2 a1))))))
  (let ((type-tags (map type-tag . args)))
    (if (> (length args) 2) (error "NO METHODS FOR THESE ARGS")
      (let ((proc (get op type-tags)))
	(if proc 
	  (apply proc (map contents args))
	  (if (eq? (car typetags) (cadr typetags)) 
	    (let ((raise1 (get-tower 'raise (car typetags)))
		  (raise2 (get-tower 'raise (cadr typetags))))
	      (if (and raise1 raise2)
		(apply-generic op (raise1 (car args)) (raise2 (cadr args)))
		(error "NO METHOD FOR THESE ARGS"))
	    (apply-generic op (apply-adjust args))))))))


