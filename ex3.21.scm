(define (print-queue queue)
  (car queue))
(define (make-queue)
  (cons '() '()))
(define (front-queue queue) (car queue))
(define (rear-queue queue) (cdr queue))
(define (empty-queue? queue) (null? (front-queue queue)))
(define (set-front-ptr! queue x)
  (set-car! queue x))
(define (set-rear-ptr! queue x)
  (set-cdr! queue x))
(define (insert-queue! queue x)
  (let ((obj (cons x '())))
    (if (empty-queue? queue)
      (begin (set-car! queue obj)
      (set-cdr! queue obj)
      (print-queue queue))
      (begin (set-cdr! (rear-queue queue) obj)
	       (set-cdr! queue obj)
	       (print-queue queue)))))
(define (delete-queue! queue)
  (if (empty-queue? queue)
    (error "DELETE! called with an empty queue" queue)
    (begin (set-front-ptr! queue (cdr (front-queue queue)))
	   (print-queue queue))))
