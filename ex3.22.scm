(define (make-queue)
  (let ((front-ptr '())
	(rear-ptr '()))
    (define (empty-queue?)
      (null? front-ptr))
    (define (print-queue)
      front-ptr)
    (define (set-front-ptr! x)
      (set! front-ptr x))
    (define (set-rear-ptr! x)
      (set! rear-ptr x))
    (define (insert-queue! x)
      (let ((obj (cons x '())))
	(if (empty-queue?)
	  (begin (set! rear-ptr obj) (set! front-ptr obj) (print-queue))
	  (begin (set-cdr! rear-ptr obj)
		 (set-rear-ptr! obj)
		 (print-queue)))))
    (define (delete-queue!)
      (if (empty-queue?)
	(error "DELETE-QUEUE called with a empty queue!")
	(begin (set-front-ptr (cdr front-ptr))
	       (print-queue))))
    (define (dispatch m)
      (cond ((eq? m 'insert-queue!) insert-queue!)
	    ((eq? m 'delete-queue!) delete-queue!)
	    ((eq? m 'empty-queue?) (empty-queue?))
	    ((eq? m 'front-ptr) front-ptr)
	    ((eq? m 'rear-ptr) rear-ptr)
	    ((eq? m 'print-queue) front-ptr)
	    (else (error "No such op"))))
    dispatch))
(define (front-ptr q)
  (q 'front-ptr))
(define (rear-ptr q)
  (q 'rear-ptr))
(define (insert-queue! q x)
  ((q 'insert-queue!) x))
(define (delete-queue! q x)
  ((q 'delete-queue!) x))
(define (empty-queue? q)
  (q 'empty-queue?))
(define (print-queue q)
  (q 'print-queue))
