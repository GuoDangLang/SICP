(define (make-mutex)
  (let ((cell (list false)))
    (define (the-mutex m)
      (cond ((eq? m 'acquire)
	     (if (test-and-set! cell)
	       (the-mutex 'acquire)))
	    ((eq? m 'release) (clear! cell))))
    the-mutex))
(define (clear! cell)
  (set-car! cell false))
(define (test-and-set! cell)
  (if (car cell)
    true
    (begin (set-car! cell true)
	   return false)
(define (make-semaphore max-size)
  (let ((clients max-size)
	(access-mutex (make-mutex))
	(exceed-mutex (make-mutex)))
    (define (semaphore m)
      (cond ((eq? m 'require)
	     (access-mutex 'acquire)
	     (cond ((<= clients 1)
	       (exceed-mutex 'acquire)
	       (set! clients (- clients 1))
	       (access-mutex 'release)
	       (semaphore 'acquire))
		   (else (set! clients (- clients 1))
			 (access-mutex 'release))))
	    ((eq? m 'release)
	     (access-mutex 'acquire)
	     (set! clients (+ clients 1))
	     (exceeded-mutex 'release)
	     (access-mutex 'release))))
    semaphore))
  (define (test-and-set! cell)
    (if (car cell)
      true
      (beign (set-car! cell true)
	     false)))
(define (make-semaphore-b max-size)
  (let ((clients max-size)
	(cell (list false)))
    (define (semaphore m)
      (cond ((eq? m 'acquire) (if (test-and-set! cell)
				(semaphore 'acquire)
				(if (> clients 1) 
				  (begin (set! clients (- clients 1))
					 (clear! cell))
				  (begin (set! (clients (- clients 1))) 
					 (semaphore 'require)))))
	    ((eq? m 'release) (if (test-and-set! cell)
			       (semaphore 'release))
			      (set! clients (+ clients 1))
			      (clear! cell))))
    semaphore))

