(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))
(define (pred x1 x2 y1 y2)
  (let ((x (random-in-range x1 x2))
	(y (random-in-range y1 y2))
	(x-center (/ (+ x1 x2) 2))
	(y-center (/ (+ y1 y2) 2))
	(radius (/ (- x2 x1) 2)))
    (if (<= (+ (* (- x x-center) (- x x-center)) (* (- y y-center) (- y y-center))) (* radius radius))
      true
      false)))
(define (monte-carlo trials experiment x1 x2 y1 y2)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0) 
	   (/ trials-passed trials))
	  ((experiment x1 x2 y1 y2)
	   (iter (- trials-remaining 1) (+ trials-passed 1)))
	  (else (iter (- trials-remaining 1) trials-passed))))
  (iter trials 0))
(* (monte-carlo 10000 pred 2.0 4.0 2.0 4.0) 4.0)
