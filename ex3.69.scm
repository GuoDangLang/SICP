(load "stream-pac")
(define (pairs s t)
  (cons-stream
    (list (stream-car s) (stream-car t))
    (interleave
      (stream-map (lambda (x) (list (stream-car s) x))
		  (stream-cdr t))
      (pairs (stream-cdr s) (stream-cdr t)))))
(define ones (cons-stream 1 ones))
(define integers (cons-stream 1 (add-stream ones integers)))
(define (interleave a b)
  (if (stream-null? a) b
    (cons-stream (stream-car a)
		 (interleave b (stream-cdr a)))))
(define (triples s t u)
  (cons-stream (list (stream-car s) (stream-car t) (stream-car u))
	       (interleave (stream-map (lambda (x) (append (list (stream-car s))
							   x))
				       (pairs t (stream-cdr u)))
			   (triples (stream-cdr s) (stream-cdr t) (stream-cdr u)))))
(define haha (triples integers integers integers))
