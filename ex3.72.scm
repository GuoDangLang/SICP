(load "ex3.70.scm")
(define (square x)
  (* x x))
(define (weight x)
  (+ (square (car x)) (square (cadr x))))
(define seq (weighted-pairs integers integers weight))
(define (stream-cadr s)
  (stream-car (stream-cdr s)))
(define (stream-caddr s)
  (stream-car (stream-cdr (stream-cdr s))))
(define (stream-cdddr s)
  (stream-cdr (stream-cdr (stream-cdr s))))
(define (find-num sequence)
  (let ((f (stream-car sequence))
	(g (stream-cadr sequence))
	(h (stream-caddr sequence)))
    (if (= (weight f) (weight g) (weight h))
      (cons-stream (weight h) (find-num (stream-cdddr sequence)))
      (find-num (stream-cdr sequence)))))
