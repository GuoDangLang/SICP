(load "stream-pac")
(define (square x)
  (* x x))
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))
(define (x-seq x1 x2)
    (cons-stream (random-in-range x1 x2)
		 (x-seq x1 x2)))
(define (y-seq y1 y2)
  (cons-stream (random-in-range y1 y2)
	       (y-seq y1 y2)))
(define (pair-seq x1 x2 y1 y2)
  (stream-map cons (x-seq x1 x2)
	      (y-seq y1 y2)))
(define (op-seq x1 x2 y1 y2)
  (let ((seq (pair-seq x1 x2 y1 y2))
	(x-rad (/ (+ x1 x2) 2))
	(y-rad (/ (+ y1 y2) 2)))
    (define pred (lambda (x)
		   (<= (+ (square (- (car x) x-rad)) (square (- (cdr x) y-rad)))
		       (square (abs (- x-rad x1))))))
    (define obj
      (stream-map pred seq))
    obj))
(define (monte-carlo expr-seq in out)
  (define (next in out)
    (cons-stream (/ in (+ in out))
		 (monte-carlo (stream-cdr expr-seq) in out)))
  (if (stream-car expr-seq)
    (next (+ 1.0 in) out)
    (next in (+ 1.0 out))))
(define (estimate-integral x1 x2 y1 y2)
  (let ((area (* (- x2 x1) (- y2 y1)))
	(seq (op-seq x1 x2 y1 y2)))
    (stream-map (lambda (x) (* area x)) (monte-carlo seq 0 0))))
(define pi (estimate-integral 0 2 0 2))

