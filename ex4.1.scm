(define (list-of-values-lr exps env)
  (if (no-operands? exps)
    '()
    (let ((left (eval (first-operand exps) env))
	  (right (list-of-values-lr (rest-operands exps) env)))
      (cons (left right)))))
(define (list-of-values-rl exps env)
  (if (no-operands? exps)
    '()
    (let ((left (list-of-values-rl (rest-operands exps) env))
	  (right (eval (first-operand exps) env)))
      (cons left right))))
