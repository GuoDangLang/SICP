(define (scan-out-defines proc-body)
  (define (scan-inits body)
    (if (not (definition? (car body)))
      '()
      (cons (list (definition-rariable (car body)) '*unassigned*)
	    (scan-inits (cdr body)))))
  (define (scan-body body)
    (if (not (definition? (car body)))
      body
      (cons (list 'set! (definition-rariable (car body)) (definition-value (car body))) (scan-body (cdr body)))))
  (make-lambda (lambda-parameters proc-body) (cons 'let 
						   (cons (scan-inits (lambda-body proc-body)) (scan-body (lambda-body proc-body))))))
(define (x y z)
  (define (cao x)
    (- x 1))
  (define (ni y)
    (- y 1))
  (cons (cao y) (ni z)))
(list (list 'define (list 'cao 'x) (list '- 'x 1)) (list 'define (list 'ni 'y)
							 (list '- 'y 1)))
(list 'let (list (list 'z '10) (list 'w '20))
      '(+ z w)
      '(- w z))
(list 'define '(x y) '(+ y 10))
(make-lambda '(x y) '(+ y 10))
(define (x y)
  (let ((jj '*unassigned*))
    (et! jj y)
     j y)
      (- y 1)) 
  (cons (cao y) (ni z)))
(define (x y)
  (let ((a 1))
    (define (f x)
      (define b (+ a x))
      (define a 5)
      (+ a b))
    (f y)))
(define (x y)
  (letrec ((fact (lambda (n)
		   (if (= n 1)
		     1
		     (* n (fact (- n 1)))))))
    (fact y)))
