(define (and? exp)
  (tagged-list? exp 'and))
(define (and-exps exp) (cdr exp))
(define (eval-and exps env)
  (if (null? exps) true
    (let ((v (eval (first-exp exps) env)))
      (cond ((last-exp? exps) (if v v false))
	    (else (if v
		    (eval-and (rest-exps exps) env)
		    false))))))
(define (or? exp)
  (tagged-list? exp 'or))
(define (or-seq exp)
  (cdr exp))
(define (eval-or seq env)
  (if (null? seq) false
    (let ((v (eval (first-exp seq) env)))
      (cond ((last-exp? seq) (if v v false))
	    (else (if v v
		    (eval-or (rest-exps seq) env)))))))
;b.
(define (and-actions exp)
  (cdr exp))
(define (and->if exp)
  (expand-and-clauses (and-actions exp)))
(define (expand-and-clauses clauses)
  (if (null? clauses)
    (make-if 'true 'true 'false)
    (let ((first (car clauses))
	  (rest (cdr clauses)))
	(make-if first (expand-and-clauses rest) 'false))))
(define (or->if exp)
  (expand-or-clauses (or-actions exp)))
(define (expand-or-clauses clauses)
  (if (null? clauses)
    (make-if 'false 'false 'true)
    (let ((first (car clauses))
	  (rest (cdr clauses)))
      (make-if first 'true (expand-or-clauses rest)))))
