(define (require q)
  (if (not q) (amb)))
(define (distinct? li)
  (cond ((null? li) true)
	((null? (cdr li)) true)
	((member (car li) (cdr li)) false)
	(else (distinct? (cdr li)))))
(define (eight-queens)
  (let ((a (amb 1 2 3 4 5 6 7 8))
	(b (amb 1 2 3 4 5 6 7 8))
	(c (amb 1 2 3 4 5 6 7 8))
	(d (amb 1 2 3 4 5 6 7 8))
	(e (amb 1 2 3 4 5 6 7 8))
	(f (amb 1 2 3 4 5 6 7 8))
	(g (amb 1 2 3 4 5 6 7 8))
	(h (amb 1 2 3 4 5 6 7 8)))
    (require (distinct? (list a b c d e f g h)))
  (list (list 'a a)
	(list 'b b)
	(list 'c c)
	(list 'd d)
	(list 'e e)
	(list 'f f)
	(list 'g g)
	(list 'h h))))
