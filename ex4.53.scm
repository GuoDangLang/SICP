(define (require p)
  (if (not p) (amb)))
(define (an-element-of li)
  (if (null? li)
    (amb)
    (amb (car li) (an-element-of (cdr li)))))
(define (gcd x y)
  (if (= y 0)
    x
    (gdc y (remainder x y))))
(define (prime? x)
  (define (judge n)
    (if (> (square n) x) x
      (if (= (remainder x n) 0) n
	(judge (+ n 1)))))
  (= (judge 2) x))
(define (square x)
  (* x x))
(define (prime-sum-pair list1 list2)
  (let ((one (an-element-of list1))
	(two (an-element-of list2)))
    (require (prime? (+ one two)))
    (cons one two)))
(define (ex)
  (let ((pairs '()))
    (if-fail (let ((p (prime-sum-pair '(1 3 5 8) '(20 35 110))))
	       (permanent-set! pairs (cons p pairs))
	       (amb))
	     pairs)))
;;;it will produce ((8 . 35) (3 . 110) (3 . 20))

