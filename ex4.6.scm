(define (let? exp)
  (tagged-list? exp 'let))
(define (v-e-b exp)
  (cdr exp))
(define (let-body exp) 
  (cddr exp))
(define (let-ve-pairs exp)
  (cadr exp))
(define (eval-let exp)
  (let->combination (veb exp)))
(define (clauses-vars ve-pairs) ;map
  (if (null? ve-pairs)
    '()
    (cons (caar ve-pairs)
	  (clauses-vars (cdr ve-pairs)))))
(define (clauses-exps ve-pairs) ;map
  (if (null? ve-pairs)
    '()
    (cons (cdar ve-pairs)
	  (clauses-exps (cdr ve-pairs)))))
(define (let->combination veb)
  (list (make-lambda (clauses-vars (car veb))
	       (cdr veb)) (clauses-vars (car veb)))) 
((let? exp) (eval (eval-let exp) env)) ; add this to eval procedure;
