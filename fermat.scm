(define (even? n) (= (remainder n 2) 0))
(define (square n) (* n n))
(define (expmod base exp m)
  (cond ((= exp 0) 1)
	((even? exp) (remainder (square (expmod base (/ exp 2) m)) m))
	(else (remainder (* base (expmod base (- exp 1) m)) m))))
(define (fermat-test n)
  (define (tryit a)
    (= (expmod a n n) a))
  (if (= n 1) true (tryit (+ 1 (random (- n 1))))))
(define (fast-prime n times)
  (cond ((= times 0) true)
	((fermat-test n) (fast-prime n (- times 1)))
	(else false)))
(define (prime? n)
  (fast-prime n 100))


