(define (filtered-accumulate combiner null-value term a next b filter?)
  (cond ((> a b) null-value)
	((not (filter? (term a))) (combiner null-value (filtered-accumulate combiner null-value term (next a) next b filter?)))
	(else (combiner (term a) (filtered-accumulate combiner null-value term (next a) next b filter?)))))
(load "fermat")
(define (self a) a)
(define (sum-primes term a next b)
  (filtered-accumulate + 0 term a next b prime?))
(define (gcd? x n) 
  (define (gcd x n)
    (if (= n 0)
      x
      (gcd n (remainder x n))))
  (= (gcd x n) 1))
(load "productiter.scm")
(define (product-primeton term a next b)
  (define (gcd1? x)
    (gcd? x b)
    )
  (filtered-accumulate * 1 term a next b gcd1?))
