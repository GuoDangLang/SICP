(define (make-frame1 origin edge1 edge2)
  (list origin edge1 edge2))
(define (make-frame origin edge1 edge2)
  (cons origin (cons edge1 edge2)))
(define (origin-frame1 f)
  (car f))
(define (edge1-frame1 f)
  (cadr f))
(define (edge2-frame1 f)
  (cadr (cdr f)))
(define (origin-frame f)
  (car f))
(define (edge1-frame f)
  (cadr f))
(define (edge2-frame f)
  (cddr f))
(define make-segment cons)
(define start-segment car)
(define end-segment cdr)
(define (frame-coord-map frame)
  (lambda (v)
    (add-rect
      (origin-frame frame)
      (add-rect (scale-vect (xcor-vect v)
			    (edge1-frame frame))
		(scale-vect (ycor-rect v)
			    (edge2-frame frame))))))
(define (segments->painter segment-list)
  (lambda (frame)
    (for-each
      (lambda (segment)
	(draw-line
	  ((frame-coord-map frame) (start-segment segment))
	  ((frame-coord-map frame) (end-segment segment)))
	(segment-list))))) 
(define (outline frame)
  (let ((seg-list (list (make-segment (make-vect 0 0) (make-vect 1 0))
			(make-segment (make-vect 1 0) (make-vect 1 1))
			(make-segment (make-vect 1 1) (make-vect 0 1))
			(make-segment (make-vect 0 1) (make-vect 0 0)))))
    ((segments->painter seg-list) frame)))
(define (draw-x frame)
  (let ((seg-list (list (make-segment (make-vect 0 0) (make-vect 1 1))
			(make-segment (make-vect 1 0) (make-vect 0 1)))))
    ((segments->painter seg-list) frame)))
(define (diamon frame)
  (let ((seg-list (list (make-segment (make-vect 0.5 0) (make-vect 1 0.5))
			(make-segment (make-vect 1 0.5) (make-vect 0.5 1))
			(make-segment (make-vect 0.5 1) (make-vect 0 0.5))
			(make-segment (make-vect 0 0.5) (make-vect 0.5 0)))))
    ((segments->painter seg-list) frame)))
		  
