(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (make-leaf symbol weight)
  (list 'leaf symbol weight))
(define (leaf? object)
  (eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))
(define (symbols tree)
  (if (leaf? tree)
    (list (symbol-leaf tree))
    (caddr tree)))
(define (weight tree)
  (if (leaf? tree)
    (weight-leaf tree)
    (cadddr tree)))
(define (make-code-tree left right)
  (list left
	right
	(append (symbols left) (symbols right))
	(+ (weight left) (weight right))))
(define (choose-branch bit branches)
  (cond ((= bit 0) (left-branch branches))
	((= bit 1) (right-branch branches))
	(else (error "bad bit -- CHOOSE-BRANCH" bit))))
(define (decode bits tree)
  (define (decode-1 bits branch)
    (if (null? bits)
      '()
      (let ((next (choose-branch (car bits) branch)))
	(if (leaf? next) (cons (symbol-leaf next) (decode-1 (cdr bits) tree))
	  (decode-1 (cdr bits) next)))))
  (decode-1 bits tree))

(define (adjoin-set x set)
  (cond ((null? set) (list x))
	((< (weight x) (weight (car set))) (cons x set))
	(else (cons (car set) (adjoin-set x (cdr set))))))

(define (make-leaf-set pairs)
  (if (null? pairs) '()
    (let ((pair (car pairs)))
      (adjoin-set (make-leaf (car pair)
			     (cadr pair))
		  (make-leaf-set (cdr pairs))))))
(define sample-tree
	  (make-code-tree (make-leaf 'A 4)
			  (make-code-tree
			    (make-leaf 'B 2)
			    (make-code-tree (make-leaf 'D 1)
					    (make-leaf 'C 1)))))
(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))

(define (element-in-set symbol set)
  (if (null? set) false
    (if (eq? symbol (car set)) true
      (element-in-set symbol (cdr set)))))
    
(define (encode-symbol symbol tree)
  (cond ((null? tree) (display "fuck no such symbol"))
	((and (leaf? (left-branch tree)) (eq? symbol (symbol-leaf (left-branch tree)))) (cons 0 '()))
	((and (leaf? (right-branch tree)) (eq? symbol (symbol-leaf (right-branch tree)))) (cons 1 '()))
	(else
	  (let ((lbs (symbols (left-branch tree)))
		(rbs (symbols (right-branch tree))))
	    (cond ((element-in-set symbol lbs) (cons 0 (encode-symbol symbol (left-branch tree))))
		  ((element-in-set symbol rbs) (cons 1 (encode-symbol symbol (right-branch tree))))
		  (else (display "fuck no such symbol")))))))

(define (encode message tree)
  (if (null? message) '()
    (append (encode-symbol (car message) tree)
	    (encode (cdr message) tree))))

(define (generate-huffman-tree pairs)
  (successive-merge (make-leaf-set pairs)))

(define (successive-merge ordered-pairs)
  (if (= (length ordered-pairs) 2) (make-code-tree (car ordered-pairs) (cadr ordered-pairs))
    (successive-merge (adjoin-set (make-code-tree (car ordered-pairs) (cadr ordered-pairs))
				(cddr ordered-pairs)))))
