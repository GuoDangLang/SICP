(define (element-of-set x set)
  (cond ((null? set) false)
	((= x (car set)) true)
	((< x (car set)) false)
	(else (element-of-set x (cdr set)))))
(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
    '()
    (let ((x1 (car set1)) (x2 (car set2)))
      (cond ((= x1 x2)
	     (cons x1 (intersection-set (cdr set1) (cdr set2))))
	    ((< x1 x2)
	     (intersection-set (cdr set1) set2))
	    ((< x2 x1)
	     (intersection-set set1 (cdr set2)))))))
(define (adjoin-set x set)
  (cond ((or (null? set) (< x (car set))) (cons x set))
	((= x (car set)) set)
	(else (cons (car set) (adjoin-set x (cdr set))))))
(define (adjoin-set-iter x set)
  (define (iter temp sett)
    (cond ((null? sett) (append temp (list x)))
	  ((< x (car sett)) (append (append temp (list x)) sett))
	  (else (iter (append temp (list (car sett))) (cdr sett)))))
  (iter nil set))
(define (union-sets set1 set2)
  (cond ((null? set1) set2)
	((null? set2) set1)
    (else (let ((cs1 (car set1))
	  (cs2 (car set2)))
      (cond ((= cs1 cs2) (union-sets (cdr set1) set2))
	    ((< cs1 cs2) (cons cs1 (union-sets (cdr set1) set2))) 
	    ((< cs2 cs1)  (cons (car set2) (union-sets set1 (cdr set2)))))))))
