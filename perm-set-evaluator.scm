(define apply-in-underlying-scheme apply)
(define (analyze exp)
  (cond ((amb? exp) (analyze-amb exp))
	((self-evaluating? exp)
	 (analyze-self-evaluating exp))
	((quoted? exp) (analyze-quoted exp))
	((variable? exp) (analyze-variable exp))
	((and? exp) (analyze-and exp))
	((or? exp) (analyze-or exp))
	((assignment? exp) (analyze-assignment exp))
	((perm-assignment? exp) (analyze-perm-assignment exp))
	((definition? exp) (analyze-definition exp))
	((let? exp) (analyze-let-evaluating exp))
	((if? exp) (analyze-if exp))
	((lambda? exp) (analyze-lambda exp))
	((begin? exp) (analyze-sequence (begin-actions exp)))
	((cond? exp) (analyze (cond->if exp)))
	((application? exp) (analyze-application exp))
	(else 
	  (error "Unkown expression type -- ANALYZE" exp))))
(define (and? exp) (tagged-list? exp 'and))
(define (and-actions exp)
  (cdr exp))
(define (and->if exp)
  (expand-and-clauses (and-actions exp)))
(define (expand-and-clauses actions)
  (if (null? actions)
    (make-if 'true 'true 'false)
    (let ((first (car actions))
	  (rest (cdr actions)))
      (make-if first (expand-and-clauses rest) 'false))))
(define (analyze-and exp)
    (analyze-if (and->if exp)))
(define (or? exp) (tagged-list? exp 'or))
(define (or-actions exp) (cdr exp))
(define (or->if exp)
  (expand-or-clauses (or-actions exp)))
(define (expand-or-clauses actions)
  (if (null? actions)
    (make-if 'false 'true 'false)
    (let ((first (car actions))
	  (rest (cdr actions)))
      (make-if first 'true (expand-or-clauses rest)))))
(define (analyze-or exp)
  (analyze-if (or->if exp)))
(define (analyze-let-evaluating exp)
  (analyze-application (cons (make-lambda (let-vars exp) (let-body exp)) 
					   (let-exprs exp))))
(define (analyze-self-evaluating exp)
  (lambda (env succeed fail) (succeed exp fail)))
(define (analyze-quoted exp)
  (let ((qval (text-of-quotation exp)))
    (lambda (env succeed fail) (succeed  qval fail))))
(define (analyze-variable exp)
  (lambda (env succeed fail) (succeed (lookup-variable-value exp env)
				      fail)))
(define (perm-assignment? exp)
  (tagged-list? exp 'permanent-set!))
(define (analyze-perm-assignment exp)
  (let ((var (assignment-variable exp))
	(vproc (analyze (assignment-value exp))))
    (lambda (env succeed fail)
      (vproc env
	     (lambda (val fail2)
	       (set-variable-value! var val env)
	       (succeed 'ok
			(lambda () (fail2))))
	     fail))))
(define (analyze-assignment exp)
  (let ((var (assignment-variable exp))
	(vproc (analyze (assignment-value exp))))
    (lambda (env succeed fail)
      (vproc env
	     (lambda (val fail2)
	       (let ((old-value (lookup-variable-value var env)))
		 (set-variable-value! var val env)
		 (succeed 'ok
			  (lambda ()
			    (set-variable-value! var old-value
						 env)
			    (fail2)))))
	     fail))))
(define (analyze-definition exp)
  (let ((var (definition-variable exp))
	(vproc (analyze (definition-value exp))))
    (lambda (env succeed fail)
      (vproc env
	     (lambda (val fail2)
	       (define-variable! var val env)
	       (succeed 'ok fail2))
	     fail))))
(define (analyze-if exp)
  (let ((pproc (analyze (if-predicate exp)))
	(cproc (analyze (if-consequent exp)))
	(aproc (analyze (if-alternative exp))))
    (lambda (env succeed fail)
      (pproc env
	     (lambda (pred-value fail2)
	       (if (true? pred-value)
		 (cproc env succeed fail2)
		 (aproc env succeed fail2)))
	     fail))))
(define (analyze-lambda exp)
  (let ((vars (lambda-parameters exp))
	(bproc (analyze-sequence (lambda-body exp))))
    (lambda (env succeed fail) (succeed (make-procedure vars bproc env)
					fail))))
(define (analyze-sequence exps)
  (define (sequentially a b)
    (lambda (env succeed fail)
      (a env
	 (lambda (a-value fail2)
	   (b env succeed fail2))
	 fail)))
  (define (loop first-proc rest-procs)
    (if (null? rest-procs)
      first-proc
      (loop (sequentially first-proc (car rest-procs))
	    (cdr rest-procs))))
  (let ((procs (map analyze exps)))
    (if (null? procs)
      (error "Empty sequence -- ANALYZE"))
    (loop (car procs) (cdr procs))))
(define (analyze-application exp)
  (let ((fproc (analyze (operator exp)))
	(aprocs (map analyze (operands exp))))
    (lambda (env succeed fail)
      (fproc env 
	     (lambda (proc fail2)
	       (get-args aprocs
			 env
			 (lambda (args fail3)
			   (execute-application
			     proc args succeed fail3))
			 fail2))
	     fail))))
(define (get-args aprocs env succeed fail)
  (if (null? aprocs)
    (succeed '() fail)
    ((car aprocs) env
		  (lambda (arg fail2)
		    (get-args (cdr aprocs)
			      env
			      (lambda (args fail3)
				(succeed (cons arg args)
					 fail3))
			      fail2))
		  fail)))
(define (execute-application proc args succeed fail)
  (cond ((primitive-procedure? proc)
	 (succeed (apply-primitive-procedure proc args)
		  fail))
	((compound-procedure? proc)
	 ((procedure-body proc)
	 (extend-environment (procedure-parameters proc)
			     args
			     (procedure-environment proc))
	 succeed
	 fail))
	(else 
	  (error
	    "Unkown procedure type -- EXECUTE-APPLICATION"
	    proc))))
(define (analyze-amb exp)
  (let ((cprocs (map analyze (amb-choices exp))))
    (lambda (env succeed fail)
      (define (try-next choices)
	(if (null? choices)
	  (fail)
	  ((car choices) env
			 succeed
			 (lambda ()
			   (try-next (cdr choices))))))
      (try-next cprocs))))
(define (ambeval exp env succeed fail)
  ((analyze exp) env succeed fail))
;(define (eval exp env)
;  (cond ((self-evaluating? exp) exp)
;	((variable? exp) (lookup-variable-value exp env))
;	((quoted? exp) (text-of-quotation exp))
;	((assignment? exp) (eval-assignment exp env))
;	((definition? exp) (eval-definition exp env))
;	((let? exp) (eval-let exp env))
;	((if? exp) (eval-if exp env))
;	((lambda? exp)
;	 (make-procedure (lambda-parameters exp)
;			 (lambda-body exp)
;			 env))
;	((begin? exp)
;	 (eval-sequence (begin-actions exp) env))
;	((cond? exp) (eval (cond->if exp) env))
;	((application? exp)
;	 (apply (eval (operator exp) env)
;		(list-of-values (operands exp) env)))
;	(else 
;	  (error "Unkown expression type -- EVAL" exp))))
;(define (apply procedure arguments)
;  (cond ((primitive-procedure? procedure)
;	 (apply-primitive-procedure procedure arguments))
;	((compound-procedure? procedure)
;j	 (eval-sequence
;	   (procedure-body procedure)
;	   (extend-environment
;	     (procedure-parameters procedure)
;	     arguments
;	     (procedure-environment procedure))))
;	(else 
;	  (error 
;	    "Unkown procedure type -- APPLY" procedure))))
;;;procedure arguments
(define (list-of-values exps env)
  (if (no-operands? exps)
    '()
    (cons (eval (first-operand exps) env)
	  (list-of-values (rest-operands exps) env))))
;;;Conditions
(define (eval-if exp env)
  (if (true? (eval (if-predicate exp) env))
    (eval (if-consequent exp) env)
    (eval (if-alternative exp) env)))
;;;sequence
(define (eval-sequence exps env)
  (cond ((last-exp? exps) (eval (first-exp exps) env))
	(else (eval (first-exp exps) env)
	      (eval-sequence (rest-exps exps) env))))
;;;Assignment and definitions
(define (eval-assignment exp env)
  (set-variable-value! (assignment-variable exp)
		       (eval (assignment-value exp) env)
		       env)
  'ok)
(define (eval-definition exp env)
  (define-variable! (definition-variable exp)
		    (eval (definition-value exp) env)
		    env)
  'ok)
;;;
(define (amb? exp) (tagged-list? exp 'amb))
(define (amb-choices exp) (cdr exp))
;;;
(define (self-evaluating? exp)
  (cond ((number? exp) true)
	((string? exp) true)
	(else false)))
(define (variable? exp) (symbol? exp))
(define (quoted? exp) (tagged-list? exp 'quote))
(define (text-of-quotation exp) (cadr exp))
(define (tagged-list? exp tag)
  (if (pair? exp)
    (eq? (car exp) tag)
    false))
(define (assignment? exp)
  (tagged-list? exp 'set!))
(define (assignment-variable exp) (cadr exp))
(define (assignment-value exp) (caddr exp))
(define (definition? exp)
  (tagged-list? exp 'define))
(define (definition-variable exp)
  (if (symbol? (cadr exp))
    (cadr exp)
    (caadr exp)))
(define (definition-value exp)
  (if (symbol? (cadr exp))
    (caddr exp)
    (make-lambda (cdadr exp)
		 (cddr exp))))
(define (lambda? exp) (tagged-list? exp 'lambda))
(define (lambda-parameters exp) (cadr exp))
(define (lambda-body exp) (cddr exp))
(define (make-lambda parameters body)
  (cons 'lambda (cons parameters body)))
(define (if? exp)
  (tagged-list? exp 'if))
(define (if-predicate exp) (cadr exp))
(define (if-consequent exp) (caddr exp))
(define (if-alternative exp)
  (if (not (null? (cdddr exp)))
    (cadddr exp)
    'false))
(define (make-if predicate consequent alternative)
  (list 'if predicate consequent alternative))
(define (begin? exp) (tagged-list? exp 'begin))
(define (begin-actions exp) (cdr exp))
(define (last-exp? seq) (null? (cdr seq)))
(define (first-exp seq) (car seq))
(define (rest-exps seq) (cdr seq))
(define (sequence->exp seq)
  (cond ((null? seq) seq)
	((last-exp? seq) (first-exp seq))
	(else (make-begin seq))))
(define (make-begin seq)
  (cons 'begin seq))
(define (application? exp) (pair? exp))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))
(define (no-operands? ops) (null? ops))
(define (first-operand ops) (car ops))
(define (rest-operands ops) (cdr ops))
(define (self-evaluating? exp)
  (cond ((number? exp) true)
	((string? exp) true)
	(else false)))
;;;Derived expressions
(define (cond? exp) (tagged-list? exp 'cond))
(define (cond-clauses exp) (cdr exp))
(define (cond-else-clause? clause)
  (eq? (cond-predicate clause) 'else))
(define (cond-predicate clause) (car clause))
(define (cond-actions clause) (cdr clause))
(define (cond->if exp)
  (expand-clauses (cond-clauses exp)))
(define (expand-clauses clauses)
  (if (null? clauses)
    'false
    (let ((first (car clauses))
	  (rest (cdr clauses)))
      (if (cond-else-clause? first)
	(if (null? rest)
	  (sequence->exp (cond-actions first))
	  (error "ELSE clause isn't last -- COND->IF"
		 clauses))
	(make-if (cond-predicate first)
		 (sequence->exp (cond-actions first))
		 (expand-clauses rest))))))
(define (let? exp)
  (tagged-list? exp 'let))
(define (let-body exp)
  (cddr exp))
(define (let-inits exp)
  (cadr exp))
(define (let-vars exp)
  (map car (let-inits exp)))
(define (let-exprs exp)
  (map cadr (let-inits exp)))
(define (eval-let exp env)
  (eval (cons (make-lambda (let-vars exp) (let-body exp))
	(let-exprs exp)) env))
(define (let*? exp)
  (tagged-list? exp 'let*))
(define (let*-body exp)
  (caddr exp))
(define (let*-inits exp)
  (cadr exp))
(define (let*->nested lets exp)
  (let ((inits (let*-inits exp))
	(body (let*-body exp)))
  (define (make-lets exprs)
    (if (null? exprs)
      body
      (list 'let (car exprs) (make-lets (cdr exprs)))))
  (make-lets inits)))
;;;ex4.8
(define (named-let? expr)
  (and (eq? (tagged-list? expr) 'let) (symbol? (cadr expr))))
(define (named-let-name exp)
  (cadr exp))
(define (named-let-body exp)
  (cadddr exp))
(define (named-let-inits exp)
  (map cadr (caddr exp)))
(define (named-let-parameters exp)
  (map car (caddr exp)))
(define (named-let-func exp)
  (list 'define (cons (named-let-name exp) (named-let-parameters exp))
	(named-let-body exp)))
(define (let->combination exp)
  (if (named-let? exp)
    (sequence->exp
      (list (named-let-fucn exp) (cons (named-let-name exp) (named-let-inits exp))))
    (cons (make-lambda (let-vars exp) (list (let-body exp)))
	  (let-exprs exp))))
;;;ex4.9
(define (while? exp)
  (tagged-list? exp 'while))
(define (while-cond exp)
  (cadr exp))
(define (while-body exp)
  (caddr exp))
(define (while-combination exp)
  (sequence->exp 
    (list (list 'define (list 'while-iter)
		(make-if (while-cond exp)
			 (sequence->exp (list (while-body exp)
					(list 'while-iter)))
			 'true))
	  (list 'while-iter))))
;;;maybe the let version,in fact if you want to define a while procedure, you must use macro;
;(define (make-let var-inits body)
;  (cons 'let (cons var-inits body)))
;(define (while-combination-let exp)
;  (make-let (list 'while-iter 
;		  (make-lambda '() 
;			       (make-if (while-cond exp)
;					(sequence->exp (list (while-body exp)
;							     (list 'while-iter))) 'true))) (list (list 'while
(define (true? x)
  (not (eq? x false)))
(define (false? x)
  (eq? x false))
(define (make-procedure parameters body env)
  (list 'procedure parameters body env))
(define (compound-procedure? p)
  (tagged-list? p 'procedure))
(define (procedure-parameters p)
  (cadr p))
(define (procedure-body p)
  (caddr p))
(define (procedure-environment p) (cadddr p))
(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())
(define (make-frame variables values)
  (cons variables values))
(define (frame-variables frame) (car frame))
(define (frame-values frame) (cdr frame))
(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons var (car frame)))
  (set-cdr! frame (cons val (cdr frame))))
(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
    (cons (make-frame vars vals) base-env)
    (if (< (length vars) (length vals))
      (error "Too many  arguments supplied" vars vals)
      (error "Too few arguments supplied" vars vals))))
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (if (null? vars)
	(env-loop (enclosing-environment env))
	(if (eq? var (car vars))
	  (car vals)
	  (scan (cdr vars) (cdr vals)))))
    (if (null? env)
	(error "Variable unbound " var)
	(let ((frame (first-frame env)))
	  (scan (frame-variables frame)
		(frame-values frame)))))
  (env-loop env))
(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars) (env-loop (enclosing-environment env)))
	    ((eq? var (car vars)) (set-car! vals val))
	    (else (scan (cdr vars) (cdr vals)))))
    (if (null? env)
      (error "Variable unbound -- SET!" var)
      (let ((frame (first-frame env)))
	(scan (frame-variables frame)
	      (frame-values frame)))))
  (env-loop env))
(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan vars vals)
      (if (null? vars)
	(add-binding-to-frame! var val frame)
	(if (eq? (car vars) var)
	  (set-car! vals val)
	  (scan (cdr vars) (cdr vals)))))
    (scan (frame-variables frame)
	  (frame-values frame))))
(define (primitive-procedure? proc)
  (tagged-list? proc 'primitive))
(define (primitive-implementation proc) (cadr proc))
(define primitive-procedures
  (list (list 'car car)
	(list 'cdr cdr)
	(list 'cons cons)
	(list 'list list)
	(list 'null? null?)
	(list 'not not)
	(list 'member member)
	(list 'memq memq)
	(list 'eq? eq?)
	(list '- -)
	(list '+ +)
	(list '* *)
	(list '/ /)
	(list '= =)
	(list '> >)
	(list '< <)
	(list '>= >=)
	(list '<= <=)
	;<more primitives>
	))
(define (primitive-procedure-names)
  (map car 
       primitive-procedures))
(define (primitive-procedure-objects)
  (map (lambda (proc) (list 'primitive (cadr proc)))
       primitive-procedures))
(define (setup-environment)
  (let ((initial-env
	  (extend-environment (primitive-procedure-names)
			      (primitive-procedure-objects)
			      the-empty-environment)))
    (define-variable! 'true true initial-env)
    (define-variable! 'false false initial-env)
    initial-env))
(define the-global-environment (setup-environment))
(define (apply-primitive-procedure proc args)
  (apply-in-underlying-scheme
    (primitive-implementation proc) args))
;;;drive loop with input prompt and output prompt
;;(define input-prompt ";;; M-Eval input:")
;;(define output-prompt ";;; M-Eval value:")
(define (prompt-for-input string)
  (newline) (newline) (display string) (newline))
(define (announce-output string)
  (newline) (display string) (newline))
;;(define (driver-loop)
 ;; (prompt-for-input input-prompt)
  ;;(let ((input (read)))
   ;; (let ((output (eval input the-global-environment)))
    ;;  (announce-for-output output-prompt)
     ;; (user-print output)))
  ;;(driver-loop))
(define (user-print object)
  (if (compound-procedure? object)
    (display (list 'compount-procedure
		   (procedure-parameters object)
		   (procedure-body object)
		   '<procedure-env>))
    (display object)))
(define input-prompt ";;; Amb-Eval input:")
(define output-prompt ";;; Amb-Eval value:")
(define (driver-loop)
  (define (internal-loop try-again)
    (prompt-for-input input-prompt)
    (let ((input (read)))
      (if (eq? input 'try-again)
	(try-again)
	(begin
	  (newline)
	  (display ";;; Starting a new problem ")
	  (ambeval input
		   the-global-environment
		   (lambda (val next-alternative)
		     (announce-output output-prompt)
		     (user-print val)
		     (internal-loop next-alternative))
		   (lambda ()
		     (announce-output
		       ";;; There are no more values of")
		     (user-print input)
		     (driver-loop)))))))
(internal-loop
  (lambda ()
    (newline)
    (display ";;; There is no current problem")
    (driver-loop))))
  

