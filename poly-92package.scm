(define (install-termlist-package)
  (define (contents-termlist tl)
    (cdr tl))
  (define (type-termlist tl)
    (car tl))
  (define (make-term order coeff)
    (cons order coeff))
  (define (order term)
    (car term))
  (define (coeff term)
    (cdr term))
  (define (empty-termlist? x)
    (if (pair? x) 
      (if (null? (contents-termlist x)) true
	false)
      (error "not a list")))
  (define (first-term-dense tl)
    (if (null? tl)
      '()
      (cons (- (length (contents-termlist tl)) 1) (car (contents-termlist tl)))))
  (define (first-term-sparse tl)
    (if (empty-termlist? tl)
      '()
      (car (contents-termlist tl))))
  (define (rest-terms-sparse tl)
    (cons 'sparse (cdr (contents-termlist tl))))
  (define (rest-terms-dense tl)
    (cons 'dense (cdr (contents-termlist tl))))
  (define (zero-pad x)
    (if (= x 0)
      '()
      (cons 0 (zero-pad (- x 1)))))
  (define (adjoin-term-dense term tl)
    (define (adjoin-term-help tl)
      (let ((rest-tl (rest-terms-dense tl)))
	(cond ((=zero? (coeff (first-term-dense tl))) tl)
	      ((empty-termlist? tl) (append (list (coeff term)) (zero-pad (order term)) (contents-termlist tl)))
	      ((> (order term) (order (first-term-dense tl))) (append (coeff term) (zero-pad (- (- (order term)
													       (order (first-term-dense tl))) 1))))
	      ((= (order term) (order (first-term-dense tl))) (append (list (add (coeff term) (coeff (first-term-dense tl)))) (cdr (contents-termlist tl))))
	      (else (cons (coeff (first-term-dense tl)) (adjoin-term-help rest-tl))))))
    (append (list (type-termlist tl)) (adjoin-term-help tl)))
  (define (adjoin-term-sparse term tl)
    (let ((type (type-termlist tl)))
      (define (adjoin-term-help tl)
	(let ((content (contents-termlist tl))
	      (first-term (first-term-sparse tl)))
	  (cond ((=zero? (coeff term)) content)
		((empty-termlist? tl) (list term))
		((> (order term) (order first-term)) (cons term content))
		((= (order term) (order first-term)) (cons (make-term (order term) (+ (coeff term)
										(coeff first-term))) (cdr content)))
		(else (cons first-term (adjoin-term-help (rest-terms-sparse tl)))))))
      (cons type (adjoin-term-help tl))))
  (put 'adjoin-term 'dense adjoin-term-dense)
  (put 'adjoin-term 'sparse adjoin-term-sparse)
  (put 'first-term 'dense (lambda (x) (first-term-dense x)))
  (put 'first-term 'sparse (lambda (x) (first-term-sparse x)))
  (put 'rest-terms 'dense (lambda (x) (rest-terms-dense x)))
  (put 'rest-terms 'sparse (lambda (x) (rest-terms-sparse x)))
  'done)

(define (install-polynomial-package)
  (define (make-poly variable term-list)
    (cons variable term-list))
  (define (variable p) (car p))
  (define (term-list p) (cdr p))
  (define (variable? v) (symbol? v))
  (define (same-variable? p1 p2)
    (and (variable? p1) (variable? p2) (eq? p1 p2)))
  (define (polynomial? p)
    (eq? (car p) 'polynomial))
  (define (zero-pad x type)
    (if (eq? type 'sparse)
      '()
      (if (= x 0) '() (cons 0 (zero-pad (- x 1) type)))))
  (define (adjoin-term term termlist)
    (get 'adjoin-term (type-tag termlist)))
  (define (order 
  (define (add-terms p1 p2)
    ((empty?
