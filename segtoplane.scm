(define (make-segment x y)
  (cons x y))
(define (start-segment v)
  (car v))
(define (end-segment v)
  (cdr v))
(define (make-point x y)
  (cons x y))
(define (x-point v)
  (car v))
(define (y-point v)
  (cdr v))
(define (len-point m n)
  (let ((mb (x-point m))
	(me (y-point m))
	(nb (x-point n))
	(ne (y-point n)))
  (sqrt (+ (square (- me ne)) (square (- mb nb))))))
(define (midpoint-segment lineseg)
  (let ((begin (start-segment lineseg))
	(end (end-segment lineseg)))
    (make-point (/ (+ (x-point begin) (x-point end)) 2)
		(/ (+ (y-point begin) (y-point end)) 2))))
(define (len-segment seg)
  (let ((b (start-segment seg))
	(e (end-segment seg)))
    (len-point b e)))
(define (vec seg)
  (let ((b (start-segment seg))
	(e (end-segment seg)))
    (cons (- (x-point e) (x-point b)) (- (y-point e) (y-point b)))))
(define (vec-head v)
  (car v))
(define (vec-tail v) (cdr v))
(define (right-angle? seg1 seg2)
  (let ((vec1 (vec seg1))
	(vec2 (vec seg2)))
	(= (+ (* (vec-head vec1) (vec-head vec2)) (* (vec-tail vec1) (vec-tail vec2))) 0)))
(define (make-rec left base)
  (cons left base))
(define (rec-left rec)
  (car rec))
(define (rec-base rec)
  (cdr rec))
(define (area rec)
  (let ((l (rec-left rec))
	(b (rec-base rec)))	
    (* (len-segment l) (len-segment b))))
(define (perimeter rec)
  (let ((l (rec-left rec))
	(b (rec-left rec)))
    (* 2 (+ (len-segment l) (len-segment b)))))

