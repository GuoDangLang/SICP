(define-syntax while
  (syntax-rules ()
		((while condition body)
		(begin (define while-iter (lambda () (if condition
		(begin body (while-iter))
		'done)))
		(while-iter)))))
;;;(define (while condition body)
  ;;;(define (while-iter)
    ;;;(if condition
      ;;;(begin body (while-iter))
      ;;;'done))
  ;;;(while-iter))
(define (test-while x)
  (while (< x 10) (begin (set! x (+ x 2)) (display x))))
(define ar  (list 'ordi 'lazy 'lazy 'ordi))
  (define exps (list 1 2 3 4))
(define (f (a lazy) b (c lazy-memo) d)
  (+ a b)
  (* c d)
  d)
(define (try-for-each li)
  (let ((counter 0))
    (define (judge x)
      (if (= x 1)
	(set! counter (+ counter 1))))
    (for-each judge li)
    counter))
(define (fuck x)
  (let ((y 1))
    (set! y 2)
    (cons y (+ x 1))))
