(define (variable? e) 
  (symbol? e))
(define (same-variable? a b)
  (and (variable? a) (variable? b) (eq? a b)))
(define (=number? x num)
  (and (number? x) (= x num)))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
	((=number? a2 0) a1)
	((and (number? a1) (number? a2)) (+ a1 a2))
	(else (list '+ a1 a2))))
(define (make-product a b)
  (cond ((or (=number? a 0) (=number? b 0)) 0)
	((=number? a 1) b)
	((=number? b 1) a)
	((and (number? a) (number? b)) (* a b))
	(else (list '* a b))))
(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (addend s) 
  (cadr s))
(define (augend s)
  (if (null? (cdddr s)) (caddr s)
    (append (list '+) (cddr s))))
(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p) 
  (if (null? (cdddr p)) (caddr p)
    (append (list '*) (cddr p))))
(define (make-exponentiation base e)
  (cond ((=number? e 1) base)
	((=number? e 0) 1)
	(else (list '** base e))))
(define (exponentiation? x)
  (and (pair? x) (eq? (car x) '**)))
(define (base x)
  (cadr x))
(define (exponent x)
  (caddr x))
(define (deriv s x)
  (cond ((number? s) 0)
	((variable? s)
	 (if (same-variable? s x) 1 0))
	((sum? s)
	 (make-sum (deriv (addend s) x)
		   (deriv (augend s) x)))
	((product? s)
	 (make-sum
	   (make-product (multiplier s)
			 (deriv (multiplicand s) x))
	   (make-product (deriv (multiplier s) x)
			 (multiplicand s))))
	((exponentiation? s)
	 (make-product (exponent s)
		       (make-product (make-exponentiation 
				       (base s)
				       (if (number? (exponent s))
					 (- (exponent s) 1)
					 (list '- (exponent s) 1)))
				     (deriv (base s) x))))
	(else 
	  (error "unknown expression type -- DERIV" s))))

